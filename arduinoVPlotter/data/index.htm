
<!DOCTYPE html>
<html>
  <head>
    <meta http-equiv="Content-type" content="text/html; charset=utf-8">
    <link rel="stylesheet" href="./uPlot.min.css">
    <script src="./uPlot.iife.min.js"></script>

    <link rel="stylesheet" href="./picnic.min.css">
    <title>Test</title>

    <script type="text/javascript">
      var ws = null;

      function sendBlob(str){
          var buf = new Uint8Array(str.length);
          for (var i = 0; i < str.length; ++i) buf[i] = str.charCodeAt(i);
          ws.send(buf);
      }


      var variables = new Array();

      var myVar;
      function processData(d) {
          var view = new DataView(d);
          var i = 1;
          while(i+1 < d.byteLength) {
              var varNum = view.getUint8(i);
              i++;

              // Request data if we don't currently have that varaiable number
              if(varNum > variables.length) {
                  sendBlob("S");
                  variables[varNum]["value"] = NaN;
              } else if (variables[varNum]["type"] == 'f') {
                  variables[varNum]["value"] = view.getFloat32(i, true);
              } else if (variables[varNum]["type"] == 'i') {
                  variables[varNum]["value"] = view.getInt32(i, true);
              } else {
                  console.log("UNKNOWN DATA TYPE");
              }

              console.log(variables[varNum]["name"] +": "+ variables[varNum]["value"]);
              i+=4;
          }
      }
      function processSetup(d) {
          var table = document.getElementById("dataConfig");
          var arr = new Uint8Array(d)
          var i = 1;

          while(i < d.byteLength) {
              var num = arr[i++];
              var type = String.fromCharCode(arr[i++]);

              // TODO: Add ability to process type
              var str = String.fromCharCode.apply(String, new Uint8Array(d, i, (arr.indexOf(0,i))-i));
              console.log("Num: " + num + "\t type: " + type);
              console.log(str);
              i = arr.indexOf(0,i) + 1;

              // Populate table and array with data if needed
              while(variables.length <= num) {
                  variables.push({"name": "N/A", "type":null, "value":NaN});
                  var row = table.insertRow(-1);
                  row.innerHTML = "<td>N</td><td>v</td><td>"+num+"</td>";
                  console.log("pushing");
              }
              variables[num] = {"name": str, "type":type};
              var row = table.rows[num+2].cells[0].innerHTML = str;
          }
      }
      function testFunc(d) {
          myVar = d;
          var view = new DataView(d);
          var opcode = String.fromCharCode(view.getUint8(0));
          if(opcode == 'S'){
              processSetup(d);

          } else if(opcode == 'D') {
              processData(d);

          } else {
              console.log("unknown");
          }
      }
      function startSocket(){
          // ws = new WebSocket('ws://'+document.location.host+'/ws',['arduino']);
          ws = new WebSocket('ws://192.168.0.180/ws',['arduino']);
          ws.binaryType = "arraybuffer";
          ws.onerror = function(e){
              console.log("ws error", e);
          };
          ws.onmessage = function(e){
              var msg = "";
              if(e.data instanceof ArrayBuffer){
                  // msg = "BIN:" +
                  //      Array.prototype.map.call(new Uint8Array(e.data), x => ('00' + x.toString(16)).slice(-2)).join('');
                  testFunc(e.data);
              } else {
                  msg = "TXT:"+e.data;
              }
          };

      }
      function onBodyLoad(){
          startSocket();
      }
    </script>
  </head>
  <body id="body" onload="onBodyLoad()">
    <br>
    <br>
    <table class="primary" id="dataConfig">
      <thead>
        <tr>
          <th>Name</th>
          <th>Value</th>
          <th>Update</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <!-- <td>test var 1</td> -->
          <!-- <td>12</td> -->
          <!-- <td> -->
          <!--   <input class="myText" type="number" id='test1' placeholder="" size='4'> -->
          <!--   <button for='test1' id='btn1' onclick="btn1Run()" class="btn">update</button> -->
          <!-- </td> -->
        </tr>
        
      </tbody>
    </table>
  </body>
</html>
